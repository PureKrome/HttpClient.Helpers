version: '{build}.0.0-dev'
image: Ubuntu
pull_requests:
  do_not_increment_build_number: true
skip_branch_with_pr: true

# Override the 'version' if this is a GH-tag-commit -or- this is a custom branch (i.e not 'master').
init:
  - ps: |
      if ($env:APPVEYOR_REPO_TAG -eq $TRUE -and $env:APPVEYOR_REPO_BRANCH -eq 'master')
      { 
          Write-Host " !! Commit is Tagged and branch is 'master' - forcing build version to tag-value." -ForegroundColor Red; 
          Update-AppveyorBuild -Version "$env:APPVEYOR_REPO_TAG_NAME"
      }
      iex ((new-object net.webclient).DownloadString('https://gist.githubusercontent.com/PureKrome/0f79e25693d574807939/raw/f5b40256fc2ca77d49f1c7773d28406152544c1e/appveyor-build-info.ps'))


matrix:
  fast_finish: true

configuration:
  - Debug
  - Release

before_build:
  # Display .NET Core version
  - dotnet --info

build_script:
  - dotnet restore --verbosity quiet
  - ps: dotnet build -c $env:CONFIGURATION -v minimal /p:Version=$env:APPVEYOR_BUILD_VERSION --no-restore

test_script:
  - ps: |
      if ($env:CONFIGURATION -eq 'Debug')
      {
          dotnet test -c $env:CONFIGURATION -v minimal --no-build --collect:"XPlat Code Coverage" --settings coverlet.runsettings --results-directory './CodeCoverageResults'
      }
      else
      {
          dotnet test -c $env:CONFIGURATION -v minimal --no-build
      }


# We only:
#   - Send DEBUG results up to codecov.
#   - Pack for RELEASE only.
after_test:
  - ps: |
      if ($env:CONFIGURATION -eq 'Debug')
      {
          # Currently, the bash script version is better than the .exe version.
          Invoke-WebRequest -Uri 'https://codecov.io/bash' -OutFile codecov.sh
          bash codecov.sh -s './CodeCoverageResults/' -f '*.xml' -Z
      }
      
      if ($env:CONFIGURATION -eq 'Release')
      {
          dotnet pack -c $env:CONFIGURATION --no-build /p:ContinuousIntegrationBuild=true /p:Version=$env:APPVEYOR_BUILD_VERSION
      }

artifacts:
  - path: '**\*.nupkg'
    name: nuget-packages
    type: NuGetPackage
  - path: '**\*.snupkg'
    name: nuget-symbols
    type: NuGetPackage


deploy:

  # NOTE: MyGet doesn't support snupkg's so we have to manually specify the nuget to send
  - provider: NuGet
    server: https://www.myget.org/F/pk-development/api/v2/package
    api_key:
      secure: 36bcjhroAjclbHs7e7oh6Hsv4lokADI6xaQcCYZmux2Sdu/IIoktFc9ORK3DTdKo
    skip_symbols: true
    artifact: nuget-packages
    on:
      APPVEYOR_REPO_TAG: false

  - provider: NuGet
    api_key:
      secure: jfcUvHZhgnUboplqTBDWr8mG5PIlrgBv5TA2fhhop4ZSiDxskyy+RtYyeHoduJFR
    on:
      branch: master
      APPVEYOR_REPO_TAG: true
